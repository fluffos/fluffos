#!/bin/sh

if test $# -ne 0; then
    case $1 in
        develop)
	    echo Preparing to build developmental version of MudOS driver ...
	    OPTIMIZE="-Wall -Wundef -DPEDANTIC -pedantic"
	    DEBUG="-g -DDEBUG -DDEBUG_MACRO"
            ;;
        debug)
	    echo Preparing to build debugging version of MudOS driver ...
	    OPTIMIZE=
	    DEBUG="-g -DDEBUG -DDEBUG_NON_FATAL -DDEBUG_MACRO"
            ;;
        *)
	    echo Unknown build type
	    exit 1
            ;;
    esac
else
    echo Preparing to build standard driver ...
fi

# Change this to use another C compiler/preprocessor
if [ "`uname -s`" -eq "Darwin" ]; then # OSX gcc is very outdated.
  CC=clang
else
  CC=gcc
fi

CFLAGS="--std=c99 -D_GNU_SOURCE -march=native -m64 -flto -D__USE_FIXED_PROTOTYPES__"
CPP="cpp"

OPTIMIZE="-O3"
DEBUG="-g"

# Change this to use another bison/yacc implementation.
YACC="bison -d -y"

# Change this if want to use another 'make' 
MAKE=make
INSTALL=install

# define this to be where you want the temporary compiled files to go
# (only used with GNU make)
OBJDIR=obj

# change this if you wish the driver binary to be named something else
DRIVER_BIN=driver

# Set INSTALL_DIR to the directory where you want to install the executables.
INSTALL_DIR="../bin"

#Enable warnings from the compiler (gcc), if wanted.
#WARN=-Wall
 
# Location of libmsgql.a, if you are using PACKAGE_DB
#EXTRALIBS=-L/usr/local/lib -lmsql
####### END OF USER CONFIGURABLE OPTIONS

CFLAGS="$CFLAGS $OSFLAGS $WARN $OPTIMIZE $DEBUG"

#
# Determine if running under Cygwin-32 and use a.exe instead
# of a.out if so
#
if test $CYGWIN; then
    A_OUT=a.exe
    echo Using a.exe for Cygwin GNU compiler default executable
else
    A_OUT=a.out
    echo Using standard a.out for compiler default executable
fi

#
# Determine system type
#
cat >comptest.c <<END
#include <stdio.h>
#include "arch.h"
int main() {
    printf("%s\n", ARCH);
}
END

$CC $CFLAGS comptest.c
ARCH=`./$A_OUT`

# test ranlib/ar
ar rcu comptest.a $A_OUT
if test $? -ne 0; then
    echo "FATAL ERROR: Could not find ar."
    exit
fi
ranlib comptest.a
if test $? -eq 0; then
    RANLIB=ranlib    
else
    RANLIB=/bin/true
fi

rm comptest.a
rm $A_OUT

if test ! "$OBJDIR" = ""; then
    mkdir $OBJDIR
fi

echo MAKE=$MAKE >GNUmakefile
echo SHELL=/bin/sh >>GNUmakefile
echo OBJDIR=$OBJDIR >>GNUmakefile
echo DRIVER_BIN=$DRIVER_BIN >>GNUmakefile
echo STRFUNCS=$STRFUNCS >>GNUmakefile
echo INSTALL=$INSTALL >>GNUmakefile
echo INSTALL_DIR=$INSTALL_DIR >>GNUmakefile
echo OPTIMIZE=$OPTIMIZE >>GNUmakefile

echo CC=$CC >>GNUmakefile
echo CPP=$CPP >>GNUmakefile
echo CFLAGS=$CFLAGS >>GNUmakefile
echo YACC=$YACC >>GNUmakefile
echo RANLIB=$RANLIB >>GNUmakefile
echo A=a >>GNUmakefile
echo O=o >>GNUmakefile
echo A_OUT=$A_OUT >>GNUmakefile

cat Makefile.in >> GNUmakefile

echo "***************** Configuration completed **************"
echo "Installing MudOS on $ARCH"
echo
echo "Using $INSTALL to install binaries in $INSTALL_DIR."
echo "Using $CPP for preprocessing."
echo "Using $CC $CFLAGS to compile."
echo "Using $YACC $YFLAGS to make the compiler."
echo "Edit $MAKEFILE if this is not what you want"
echo
echo "Otherwise, type '$MAKE' to build MudOS, then '$MAKE install'."
