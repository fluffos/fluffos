#!/bin/sh

if test $# -ne 0; then
  case $1 in
    develop)
      echo Preparing to build developmental version of MudOS driver ...
      OPTIMIZE="-O2"
      DEBUG="-g -Wall -Wextra -Wno-missing-field-initializers -pedantic -D_FORTIFY_SOURCE=2 -DDEBUG -DDEBUG_MACRO"
      ;;
    debug)
      echo Preparing to build debugging version of MudOS driver ...
      OPTIMIZE="-O3"
      DEBUG="-g -DDEBUG -DDEBUG_NON_FATAL -DDEBUG_MACRO"
      ;;
    *)
      echo Unknown build type
      exit 1
      ;;
  esac
else
  echo Preparing to build standard driver ...
fi

# Change this to use another C compiler/preprocessor
if [ "`uname -s`" = "Darwin" ]; then # OSX gcc is very outdated.
  CXX="clang++"
else
  CXX=${CXX:-"g++"}
fi

# TODO: remove need for _GNU_SOURCE
CXXFLAGS="--std=c++0x -D_GNU_SOURCE -fno-omit-frame-pointer"

# By default driver compile to native environment, you can
# add "-m64" to force compile under 64bit, "-m32" for 32bit.
COMPILER_FLAGS=${COMPILER_FLAGS:-"-march=native"}

OPTIMIZE=${OPTIMIZE:-"-O3"}
DEBUG=${DEBUG:-"-g"}

# Only support bison for now.
YACC="bison -y"

# Change this if want to use another 'make'
MAKE=make
INSTALL=install

# change this if you wish the driver binary to be named something else
DRIVER_BIN=driver

# Set INSTALL_DIR to the directory where you want to install the executables.
INSTALL_DIR="../bin"

#Enable warnings from the compiler (g++), if wanted.
#WARN=-Wall

# Location of libmsgql.a, if you are using PACKAGE_DB
#EXTRALIBS=-L/usr/local/lib -lmsql
####### END OF USER CONFIGURABLE OPTIONS

CXXFLAGS="$CXXFLAGS $COMPILER_FLAGS $WARN $OPTIMIZE $DEBUG"

#
# Determine if running under Cygwin-32 and use a.exe instead
# of a.out if so
#
if test $CYGWIN; then
  A_OUT=a.exe
  echo Using a.exe for Cygwin GNU compiler default executable
else
  A_OUT=a.out
  echo Using standard a.out for compiler default executable
fi

#
# Determine system type
#
cat >comptest.c <<END
#include <stdio.h>
#include "arch.h"
int main() {
printf("%s\n", ARCH);
}
END

$CXX $CXXFLAGS -o $A_OUT -flto comptest.c

if [ $? -eq 0 ]; then
  CXXFLAGS="$CXXFLAGS -flto"
else
  $CXX $CXXFLAGS -o $A_OUT comptest.c
  if [ $? -ne 0 ]; then
    echo "FATAL ERROR: test compile failed."
    exit 1
  fi
fi

ARCH=`./$A_OUT`

rm $A_OUT
rm comptest.c

# Force an reconfigure.
rm configure.h
rm conf.h
CXX=$CXX CXXFLAGS=$CXXFLAGS ./configure

echo MAKE=$MAKE >Makefile
echo SHELL=/bin/sh >>Makefile
echo DRIVER_BIN=$DRIVER_BIN >>Makefile
echo STRFUNCS=$STRFUNCS >>Makefile
echo INSTALL=$INSTALL >>Makefile
echo INSTALL_DIR=$INSTALL_DIR >>Makefile
echo OPTIMIZE=$OPTIMIZE >>Makefile

echo CXX=$CXX >>Makefile
echo CXXFLAGS=$CXXFLAGS >>Makefile
echo YACC=$YACC >>Makefile
echo A=a >>Makefile
echo O=o >>Makefile
echo A_OUT=$A_OUT >>Makefile

cat Makefile.in >> Makefile

echo "***************** Configuration completed **************"
echo "Compiling FluffOS on $ARCH."
echo
echo "Using $INSTALL to install binaries in $INSTALL_DIR."
echo "Using $CXX -E $CXXFLAGS for preprocessing."
echo "Using $CXX $CXXFLAGS to compile."
echo "Using $YACC to make the compiler."
echo "Edit Makefile if this is not what you want"
echo
echo "Otherwise, type '$MAKE' to build FluffOS, then '$MAKE install'."
