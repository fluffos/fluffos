# YOU DO NOT NEED TO CONFIGURE ANYTHING IN THIS FILE.
#
# RUN THE SHELL SCRIPT ./build.FluffOS to generate the Makefiles, and follow
# its instructions.
#
############################################################################
#
# **** TARGETS AND THEIR CORRECT USAGE ****
#
# COMPILATION TARGETS:
#
# all:		compile all the files
#
# install:	make all, then move the files to the correct directories
#
# test :  automatically run through testsuite standard tests.
#
# 'CLEAN' TARGETS:
#
# clean:	remove everything, also remove .orig and .rej files,
#		cores, lint files, emacs backups, tag files, yacc debug
#		files, generated Makefiles, generated binaries, and
#		generated dependency info
#
# ---- DO NOT EDIT ANYTHING BELOW HERE UNLESS YOU KNOW ALOT ABOUT HOW
#      MUDOS WORKS INTERNALLY ----

# @configure_input@
@SET_MAKE@

CXX=@CXX@
# FIXME: should not have jam everything into CXXFLAGS
CXXFLAGS=@CXXFLAGS@ @GCOV_CFLAGS@ @CPPFLAGS@ @LIBEVENT_CPPFLAGS@
LDFLAGS=@CXXFLAGS@ @LDFLAGS@
LIBS=@LIBS@ @GCOV_LIBS@
BISON=@BISON@
DRIVER_BIN=@DRIVER_BIN@@EXEEXT@
INSTALL=@INSTALL@
INSTALL_DIR=@bindir@
OPTIMIZE=@OPTIMIZE@
USE_JEMALLOC=@USE_JEMALLOC@

# for packages/db and packages/async
MYSQL_CFLAGS=@MYSQL_CFLAGS@
POSTGRESQL_CPPFLAGS=@POSTGRESQL_CPPFLAGS@
SQLITE3_CFLAGS=@SQLITE3_CFLAGS@

# For packages/crypto
OPENSSL_INCLUDES=@OPENSSL_INCLUDES@

# For packages/pcre
PCRE_CFLAGS=@PCRE_CFLAGS@

# ---- BUILD STEPS:
# 1) generate all GENFILES, using several script in tools/
# 2) main build.

.PHONY: all clean install test help

all: $(GENFILES) $(DRIVER_BIN) portbind

%.o: %.cc
	@echo [CC] $@
	@$(CXX) $(CXXFLAGS) -MMD -MP -x c++ -o $@ -c $<

# Automatically include all dependencies
DEPFILES=$(shell find ./ -type f -name '*.d')
-include $(DEPFILES)

BASE_OBJS= \
	base/internal/debugmalloc.o \
	base/internal/external_port.o \
	base/internal/file.o \
	base/internal/hash.o \
	base/internal/log.o \
	base/internal/md.o \
	base/internal/outbuf.o \
	base/internal/port.o \
	base/internal/rc.o \
	base/internal/stats.o \
	base/internal/stralloc.o \
	base/internal/strput.o

VM_OBJS= \
	vm/internal/applies_table.autogen.o \
	vm/internal/efuns.autogen.o \
	vm/internal/apply.o \
	vm/internal/eval.o \
	vm/internal/master.o \
	vm/internal/otable.o \
	vm/internal/posix_timers.o \
	vm/internal/simul_efun.o \
	vm/internal/simulate.o \
	vm/internal/vm.o

VM_BASE_OBJS= \
	vm/internal/base/apply_cache.o \
	vm/internal/base/array.o \
	vm/internal/base/buffer.o \
	vm/internal/base/class.o \
	vm/internal/base/function.o \
	vm/internal/base/interpret.o \
	vm/internal/base/mapping.o \
	vm/internal/base/object.o \
	vm/internal/base/program.o \
	vm/internal/base/svalue.o

VM_COMPILER_OBJS= \
	vm/internal/compiler/compiler.o \
	vm/internal/compiler/icode.o \
	vm/internal/compiler/generate.o \
	vm/internal/compiler/grammar.autogen.o \
	vm/internal/compiler/lex.o \
	vm/internal/compiler/scratchpad.o \
	vm/internal/compiler/trees.o \

DRIVER_OBJS= \
	backend.o \
	comm.o \
	console.o \
	fliconv.o \
	main.o \
	user.o \
	net/telnet.o \
	thirdparty/libtelnet/libtelnet.o

ifeq ($(USE_JEMALLOC), 1)
JEMALLOC_OBJS= \
	thirdparty/jemalloc/lib/libjemalloc_pic.a
endif

# All generated files.
GENFILES= \
	cc.h \
	packages/packages.autogen.spec \
	packages/packages.autogen.fullspec \
	packages/packages.autogen.makefile \
	vm/internal/applies_table.autogen.h \
	vm/internal/applies_table.autogen.cc \
	vm/internal/options.autogen.h \
	vm/internal/efuns.autogen.cc \
	vm/internal/efuns.autogen.h \
	vm/internal/compiler/grammar.autogen.cc \
	vm/internal/compiler/grammar.autogen.h

$(GENFILES): local_options tools/build_packages_genfiles.sh tools/build_applies.autogen tools/make_func.autogen tools/make_grammar.sh tools/make_options_def.py vm/internal/applies vm/internal/compiler/grammar.y.pre
	@echo [Generating cc.h]
	@-rm -f cc.h
	@echo "/* this file automatically generated by the Makefile */" > cc.h
	@echo '#define COMPILER "$(CXX)"' >> cc.h
	@echo '#define CXXFLAGS "$(CXXFLAGS)"' >> cc.h
	@echo '#define OPTIMIZE "$(OPTIMIZE)"' >> cc.h
	@echo '#define SOURCE_REVISION "@SOURCE_REVISION@"' >> cc.h
	@echo '#define USE_JEMALLOC @USE_JEMALLOC@' >> cc.h
	@echo [Generating Packages]
	@./tools/build_packages_genfiles.sh $(CXX) $(CXXFLAGS)
	@echo [Generating applies table...]
	@./tools/build_applies.autogen
	@echo [Generating efun tables...]
	@./tools/make_func.autogen packages/packages.autogen.fullspec
	@echo [Generating grammar...]
	@./tools/make_grammar.sh $(CXX) $(CXXFLAGS)
	@$(BISON) -o vm/internal/compiler/grammar.autogen.cc \
		--defines=vm/internal/compiler/grammar.autogen.h \
		--warnings=all --report=all --report-file=vm/internal/compiler/grammar.autogen.report \
		vm/internal/compiler/grammar.autogen.y
	@echo [Generating options_def...]
	@$(CXX) $(CXXFLAGS) -E -undef -dM base/internal/options_incl.h | tools/make_options_def.py vm/internal/options.autogen.h

-include packages/packages.autogen.makefile

tools/build_applies.autogen: tools/build_applies.o
	@echo [Linking] $@
	@$(CXX) $(LDFLAGS) tools/build_applies.o -o tools/build_applies.autogen $(LIBS)

tools/make_func.autogen: tools/make_func.autogen.o
	@echo [Linking] $@
	@$(CXX) $(LDFLAGS) tools/make_func.autogen.o -o tools/make_func.autogen $(LIBS)

tools/make_func.autogen.cc: tools/make_func.y
	@echo [Generating] $@
	@$(BISON) -o tools/make_func.autogen.cc tools/make_func.y

$(DRIVER_BIN): $(JEMALLOC_OBJS) $(BASE_OBJS) $(VM_OBJS) $(VM_COMPILER_OBJS) $(VM_BASE_OBJS) $(PACKAGES_ALL_OBJS) $(DRIVER_OBJS) dtrace_compile
	@-mv -f $(DRIVER_BIN) $(DRIVER_BIN).old
	@echo [Linking $@]
	@$(CXX) $(LDFLAGS) $(BASE_OBJS) $(VM_OBJS) $(VM_COMPILER_OBJS) $(VM_BASE_OBJS) $(PACKAGES_ALL_OBJS) $(DRIVER_OBJS) $(JEMALLOC_OBJS) `./dtrace_compile` -o $(DRIVER_BIN) $(LIBS) \
		@MYSQL_LDFLAGS@ @POSTGRESQL_LDFLAGS@ @SQLITE3_LDFLAGS@ \
		@OPENSSL_LDFLAGS@ @OPENSSL_LIBS@ @PCRE_LIBS@ \
		@LIBEVENT_LIBS@ @LIBEVENT_LDFLAGS@

thirdparty/jemalloc/lib/libjemalloc_pic.a:
	@echo [Building jemalloc] $@
	@cd thirdparty/jemalloc && GIT_DIR=./.git ./autogen.sh --enable-prof && make && cd -

# Hack to work around brokeness in libtelnet.c
thirdparty/libtelnet/libtelnet.o: thirdparty/libtelnet/libtelnet.c
	@echo [CC] $@
	@$(CXX) -c $(CXXFLAGS) -DHAVE_ZLIB -x c++ -o $@ $<

dtrace_compile: dtrace_compile.cc
	@echo [Linking] $@
	$(CXX) $(CXXFLAGS) -x c++ dtrace_compile.cc -o dtrace_compile

portbind: portbind.o
	@echo [Linking] $@
	@$(CXX) $(LDFLAGS) portbind.o -o portbind $(LIBS)

# remove everything
clean:
	@echo [Cleaning ...]
	@-find . -name "*.o" | xargs rm -rf
	@-find . -name "*.d" | xargs rm -rf
	@-find . -name "*.gcda" | xargs rm -rf
	@-find . -name "*.gcno" | xargs rm -rf
	@-find . -name "*.gcov" | xargs rm -rf
	@-find . -name "*.autogen*" | xargs rm -rf
	@-rm -f tools/make_func.autogen tools/build_applies.autogen
	@-rm -rf *.d *.tab.cc *.tab.h
	@-rm -f efun_defs.cc option_defs.cc
	@-rm -f opcodes.h efunctions.h opc.h efun_protos.h
	@-rm -f lpc/*.generated applies.h applies_table.cc files
	@-rm -f lpc/compiler/grammar.y lpc/compiler/grammar.tab.*
	@-rm -f comptest* a.out *.exe
	@-rm -f packages/packages
	@-rm -f Makefile.MudOS GNUmakefile.MudOS
	@-rm -f cc.h edit_source
	@-rm -f core y.output testsuite/core testsuite/tmp/*
	@-rm -f testsuite/OPCPROF.* testsuite/opc.*
	@-rm -rf testsuite/binaries testsuite/single/swapfile.*
	@-rm -f testsuite/OBJ_DUMP* testsuite/test_file testsuite/testfile
	@-rm -f testsuite/tmp_eval_file.c testsuite/sf.o testsuite/ed_test
	@-rm -f testsuite/log/log testsuite/log/debug.log testsuite/log/compile
	@-find . -name "*~" -print | xargs rm
	@-find . -name "*.orig" -print | xargs rm
	@-find . -name "*.rej" -print | xargs rm
	@-rm -f *.ln tags TAGS
	@-rm -f $(DRIVER_BIN) $(DRIVER_BIN).old portbind *.exe
	@-rm -f 1.out 2.out
	@-rm -f dtrace_compile
	@-rm -f testsuite/log/author_stats testsuite/log/domain_stats
	@-rm -f testsuite/tmp.o
	@-cd thirdparty/jemalloc && make clean && cd -
	@echo [Done]

test: all
	cd testsuite && ../driver -d -ftest etc/config.test

help:
	@echo "***************** Configuration completed **************"
	@echo "Compiling @PACKAGE_STRING@ (@SOURCE_REVISION@) as $(DRIVER_BIN) for @target@."
	@echo
	@echo "INSTALL: '$(INSTALL)'"
	@echo "INSTALL DIR: '$(INSTALL_DIR)'"
	@echo "BISON: '$(BISON)'"
	@echo "COMPILE: '$(CXX) $(CXXFLAGS)'"
	@echo "LINK: '$(CXX) $(LDFLAGS)'"
	@echo
	@if [ -n "@LIBEVENT_LIBS@" ]; then echo "LIBEVENT: '@LIBEVENT_LIBS@', '@LIBEVENT_CPPFLAGS@', '@LIBEVENT_LDFLAGS@'"; fi
	@if [ -n "@MYSQL_VERSION@" ]; then echo "MYSQL: '@MYSQL_VERSION@', '@MYSQL_CFLAGS@', '@MYSQL_LDFLAGS@'"; fi
	@if [ -n "@POSTGRESQL_VERSION@" ];then echo "POSTGRESQL: '@POSTGRESQL_VERSION@', '@POSTGRESQL_CPPFLAGS@', '@POSTGRESQL_LDFLAGS@'"; fi
	@if [ -n "@SQLITE3_VERSION@" ]; then echo "SQLite3: '@SQLITE3_VERSION@', '@SQLITE3_CFLAGS@', '@SQLITE3_LDFLAGS@'"; fi
	@if [ -n "@OPENSSL_LIBS@" ]; then echo "OPENSSL: '@OPENSSL_LIBS@', '@OPENSSL_INCLUDES@', '@OPENSSL_LDFLAGS@'"; fi
	@if [ -n "@PCRE_LIBS@" ]; then echo "PCRE: '@PCRE_LIBS@', '@PCRE_CFLAGS@'"; fi
	@echo
	@echo "Make Version:"
	-@$(MAKE) -v
	@echo "Compiler Version:"
	-@$(CXX) -v
	@echo "Edit Makefile if this is not what you want"
	@echo
	@echo "Otherwise, type '$(MAKE)' to build FluffOS, then '$(MAKE) install'."
