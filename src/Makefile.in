# YOU DO NOT NEED TO CONFIGURE ANYTHING IN THIS FILE.
#
# RUN THE SHELL SCRIPT ./build.FluffOS to generate the Makefiles, and follow
# its instructions.
#
############################################################################
#
# **** TARGETS AND THEIR CORRECT USAGE ****
#
# COMPILATION TARGETS:
# 
# all:		compile all the files
#
# install:	make all, then move the files to the correct directories
#
# test :  automatically run through testsuite standard tests.
#
# 'CLEAN' TARGETS:
#
# clean:	remove everything, also remove .orig and .rej files,
#		cores, lint files, emacs backups, tag files, yacc debug
#		files, generated Makefiles, generated binaries, and
#		generated dependency info
#
# ---- DO NOT EDIT ANYTHING BELOW HERE UNLESS YOU KNOW ALOT ABOUT HOW
#      MUDOS WORKS INTERNALLY ----

# **************************************************************************
# **** NOTE: If you add something here, also add it to the OBJ= rule below,
# **** or non-GNU makes will die
# **************************************************************************
SRC=grammar.tab.c lex.c main.c rc.c interpret.c simulate.c file.c object.c \
  backend.c array.c mapping.c comm.c ed.c regexp.c buffer.c crc32.c \
  malloc.c mallocwrapper.c class.c efuns_main.c efuns_port.c \
  call_out.c otable.c dumpstat.c stralloc.c hash.c \
  port.c reclaim.c parse.c simul_efun.c sprintf.c program.c \
  compiler.c avltree.c icode.c trees.c generate.c scratchpad.c \
  socket_efuns.c socket_ctrl.c eoperators.c socket_err.c md.c \
  disassembler.c uvalarm.c \
  replace_program.c master.c function.c \
  debug.c crypt.c applies_table.c add_action.c eval.c fliconv.c console.c \
  posix_timers.c

OBJ=grammar.tab.o lex.o main.o rc.o interpret.o simulate.o file.o object.o \
  backend.o array.o mapping.o comm.o ed.o regexp.o buffer.o crc32.o \
  malloc.o mallocwrapper.o class.o efuns_main.o efuns_port.o \
  call_out.o otable.o dumpstat.o stralloc.o hash.o \
  port.o reclaim.o parse.o simul_efun.o sprintf.o program.o \
  compiler.o avltree.o icode.o trees.o generate.o scratchpad.o \
  socket_efuns.o socket_ctrl.o eoperators.o socket_err.o md.o \
  disassembler.o uvalarm.o \
  replace_program.o master.o function.o \
  debug.o crypt.o applies_table.o add_action.o eval.o fliconv.o console.o \
  posix_timers.o

VPATH = .:./packages

# ---- BUILD STEPS:
# 1) build edit_source
# 2) use edit_source preprocess stuff.
# 3) main build.

all: main_build

main_build: files
	$(MAKE) build_packages
	$(MAKE) build_binaries

build_packages:
	$(MAKE) -C packages 'CC=$(CC)' 'CFLAGS=$(CFLAGS)' 'A=$(A)' 'O=$(O)'

build_binaries: $(DRIVER_BIN) addr_server portbind

.c.$(O):
	$(CC) -c $(CFLAGS) -o $@ $<

lex.o: lex.c preprocess.c cc.h grammar.tab.c

grammar.tab.o: grammar.tab.c opcodes.h

grammar.tab.c: grammar.y
	-rm -f grammar.tab.*
	$(YACC) -d grammar.y
	mv y.tab.c grammar.tab.c
	mv y.tab.h grammar.tab.h 

$(DRIVER_BIN): $(OBJ) dtrace_compile
	-mv -f $(DRIVER_BIN) $(DRIVER_BIN).old
	$(CC) -rdynamic $(CFLAGS) $(OBJ) packages/*.$(O) `./dtrace_compile` -o $(DRIVER_BIN) `cat system_libs`

dtrace_compile: dtrace_compile.c local_options
	$(CC) dtrace_compile.c -o dtrace_compile

addr_server: files addr_server.o socket_ctrl.o port.o addr_server.h
	$(CC) $(CFLAGS) socket_ctrl.o addr_server.o port.o \
	-o addr_server `cat system_libs`

portbind: portbind.o
	$(CC) $(CFLAGS) portbind.o -o portbind `cat system_libs`

cc.h:
	rm -f cc.h
	echo "/* this file automatically generated by the Makefile */" > cc.h
	echo '#define COMPILER "$(CC)"' >> cc.h
	echo '#define CFLAGS   "$(CFLAGS)"' >> cc.h
	echo '#define OPTIMIZE "$(OPTIMIZE)"' >> cc.h

# the touches here are necessary to fix the modification times; link(2) does
# 'modify' a file
files: edit_source sysmalloc.c debugmalloc.c wrappedmalloc.c options.h op_spec.c func_spec.c configure.h grammar.y.pre
	./edit_source -options -malloc -build_func_spec '$(CC) -E $(CFLAGS)' \
	              -process grammar.y.pre
	./edit_source -build_efuns -build_applies
	touch mallocwrapper.c
	touch malloc.c
	touch files
	-echo "Configuration done: system_libs: "
	-cat ./system_libs

make_func.tab.c: make_func.y cc.h
	-rm -f make_func.tab.*
	$(YACC) -d make_func.y
	mv y.tab.h make_func.tab.h 
	mv y.tab.c make_func.tab.c

configure.h: edit_source build.FluffOS
	-if test \( ! -r configure.h \) -o \( ! -r configuration \); then \
	    rm -f configuration; \
	    touch configuration; \
	fi
	if test "Machine `uname -a` Configure version 5" = "`cat configuration`"; then \
	    echo "Skipping configuration ..."; \
	else \
	    ./edit_source -configure; \
	    echo "Machine `uname -a` Configure version 5" > configuration; \
	fi

edit_source: edit_source.o hash.o make_func.tab.o
	$(CC) $(CFLAGS) edit_source.o hash.o make_func.tab.o -o edit_source

# don't optimize these two
edit_source.o: edit_source.c preprocess.c cc.h
	$(CC) $(CFLAGS) -o $@ -c $<

make_func.tab.o: make_func.tab.c
	$(CC) $(CFLAGS) -o $@ -c $<

install: all
	-mkdir $(INSTALL_DIR)
	$(INSTALL) $(DRIVER_BIN) $(INSTALL_DIR)
	$(INSTALL) addr_server $(INSTALL_DIR)
	$(INSTALL) portbind $(INSTALL_DIR)

# remove everything except configuration
clean:
	-(cd packages; $(MAKE) "A=$(A)" "O=$(O)" clean)
	-rm -rf *.$(O) *.tab.c *.tab.h
	-rm -f efun_defs.c option_defs.c
	-rm -f opcodes.h efunctions.h opc.h efun_protos.h
	-rm -f malloc.c mallocwrapper.c
	-rm -f func_spec.cpp applies.h applies_table.c files
	-rm -f grammar.y comptest* a.out *.exe
	-rm -f packages/packages
	-rm -f Makefile.MudOS GNUmakefile.MudOS
	-rm -f cc.h edit_source
	-rm -f core y.output testsuite/core testsuite/tmp/*
	-rm -f testsuite/OPCPROF.* testsuite/opc.*
	-rm -rf testsuite/binaries testsuite/single/swapfile.*
	-rm -f testsuite/OBJ_DUMP* testsuite/test_file testsuite/testfile
	-rm -f testsuite/tmp_eval_file.c testsuite/sf.o testsuite/ed_test
	-rm -f testsuite/log/log testsuite/log/debug.log testsuite/log/compile
	-find . -name "*~" -print | xargs rm
	-find . -name "*.orig" -print | xargs rm
	-find . -name "*.rej" -print | xargs rm
	-rm -f *.ln tags TAGS
	-rm -f $(DRIVER_BIN) $(DRIVER_BIN).old addr_server portbind *.exe
	-rm -f Dependencies tmpdepend
	-rm -f 1.out 2.out
	-rm -f dtrace_compile
	-rm -f testsuite/log/author_stats testsuite/log/domain_stats
	-rm -f testsuite/tmp.o                                  
	-touch Dependencies

reconfigure: clean
	rm -f configure.h system_libs options_incl.h configuration

test: all
	cd testsuite && ../driver -ftest etc/config.test

include Dependencies
